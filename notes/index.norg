@document.meta
title: index
description: 
authors: adam
categories: 
created: 2025-02-11T18:19:56-0800
updated: 2025-02-26T10:11:23-0800
version: 1.1.1
@end


* Getting started

  Followed [some guys guide]{https://dev.to/andyklimczak/very-unofficial-getting-started-with-elixir-phoenix-guide-3k55}

* Runing server

  @code
  mix phx.server
  @end

* Goals

** Static pages
   - ( ) Welcome page
   - ( ) Wedding logisitc page
   - ( ) Invite page

** RSVP System
   - (x) Admin view of RSVP status 
   - (x) User view of RSVP status
   - (x) User input for RSVP status
   - (x) 2 User types

** Styling
   - ( ) Make it pretty

** User system
   - (x) Will likely just do it with a static password on the site, I'm not
         worried about data being leaked. Passord hash can be hard coded server
         side and/or stored in sqlite3 to prevent javascript look up. This 
         only thing we need to protect against is incidental writes to another
         person's RSVP status. If abuse happens we'll figure it out.
   - ( ) Restrict who can create a user account

** Email system
   - (x) Send transactional emails
   - ( ) Send email invites
   - ( ) Admins can send email updates to guest
   - NOTE: Could look into AppScript for sending email, instead of a paid
     service


* Architecutre

** Reverse proxy
   We're going to wait until it happens, outside a Robots.txt file, we'll
   ignore most things. Not worreid about DDOS or maliciously reading/writing
   RSVP statuses.

   I'd like to avoid bots from putting too much load on the system, as I plan
   to run on the cheapest VM I can find.

** Mailer Service
   Considered a several options here:
   - Mailgun
   - SES
   - GMail

   Ultimatlely went with SES because it's much cheaper than Mailgun which is
   more suited to bulk email send than to transactional emails. Although
   Mailgun would work. I considered GMail as well, but the GMail API relies
   on OAuth 2.0 tokens and keeping those up to date would require extra
   complixity. The big advantage of GMail is that it'd appear in the GMail
   inbox and be free, so for our use case it'd probably be easier since we
   could use GMail as a monitoring tool for what we're sending.

** Images

   Created an image core component wrapper. For local images serving them
   statically, but I'd like to move images into static blob storage in order to
   keep images out of the git repo (might be over kill, but it feels like good
   hygenie).

   If blob storage is annoying to configure I may just write a script to copy
   my local images into the production server's satic directory.
